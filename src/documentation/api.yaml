swagger: "2.0"
info:
  title: "Shoppingify"
  description: >
    Api documentation for the Shoppingify api.
  version: "1.0.0"
host: "localhost:3000/api"
basePath: "/"
schemes:
  - "http"
paths:
  /login:
    post:
      summary: "Authenticate an user"
      tags:
        - auth
      description: "This endpoint allows users to generate a token so they can login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Email and password to authenticate"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          $ref: "#/responses/401"
        422:
          $ref: "#/responses/422"
        500:
          $ref: "#/responses/500"

  /register:
    post:
      summary: "Register a user"
      tags:
        - auth
      description: "This endpoint allows users to register"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Email and password to authenticate"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          $ref: "#/responses/401"
        422:
          $ref: "#/responses/422"
        500:
          $ref: "#/responses/500"

  /lists:
    get:
      summary: "Fetch all the connected user lists"
      tags:
        - lists
    post:
      summary: "Create a list for the connected user"
      tags:
        - lists
      description: "This endpoint allows user to create a list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            required:
              - name
            properties:
              name:
                type: string
                example: "List name"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ListResponse"
        401:
          $ref: "#/responses/401"
        422:
          $ref: "#/responses/422"

  /lists/{id}:
    get:
      summary: "Get a single list"
      tags:
        - lists
      description: "This endpoint allows user to get a list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ListResponse"
        401:
          $ref: "#/responses/401"
        404:
          $ref: "#/responses/404"

    put:
      summary: "Update a list"
      tags:
        - lists
      description: "This endpoint allows user to update a list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "List name"
              status:
                type: "string"
                example: "active | completed | canceled"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ListResponse"
        401:
          $ref: "#/responses/401"
        422:
          $ref: "#/responses/422"

    delete:
      summary: "Delete a user's list"
      tags:
        - lists
      description: "This endpoint allows user to delete an list"
      responses:
        204:
          description: "Success"
        401:
          $ref: "#/responses/401"
        404:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"

  # ITEMS
  /items:
    get:
      summary: "Fetch items grouped by categories"
      tags:
        - items
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              data:
                type: "array"
                items:
                  category: "string"

    post:
      summary: "Create an item"
      tags:
        - items
      description: "This endpoint allows user to create an item"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/ItemPostRequest"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ItemResponse"
        401:
          $ref: "#/responses/401"
        422:
          $ref: "#/responses/422"

  /items/id:
    put:
      summary: "Update an item"
      tags:
        - items
      description: "This endpoint allows user to update an item"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/ItemPutRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ItemResponse"
        401:
          $ref: "#/responses/401"
        404:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
        422:
          $ref: "#/responses/422"

    delete:
      summary: "Delete an item"
      tags:
        - items
      description: "This endpoint allows user to delete an item"
      responses:
        204:
          description: "Success"
        401:
          $ref: "#/responses/401"
        404:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"

responses:
  400:
    description: Bad Request
    schema:
      $ref: "#/definitions/Error"
  401:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
  422:
    description: Validation Error
    schema:
      $ref: "#/definitions/ValidationError"
  500:
    description: Internal Server Error
    schema:
      $ref: "#/definitions/Error"

definitions:
  LoginRequest:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: "string"
        example: "username@email.com"
      password:
        type: "string"
        example: "secret"

  LoginResponse:
    type: "object"
    properties:
      status:
        type: "string"
      data:
        type: "object"
        properties:
          user:
            type: "object"
            example:
              id: 1
              email: "email@example.com"
          token:
            type: "string"
            example: "dfjghjk34h5kjhdfkjdfgklj76l8k"

  ListResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      status:
        type: "string"
      user_id:
        type: "integer"
      created_at:
        type: "string"
      updated_at:
        type: "string"

  ItemPostRequest:
    type: "object"
    required:
      - name
      - category
    properties:
      name:
        type: "string"
        example: "Item name"
      category:
        type: "string"
        example: "Category1"
      note:
        type: "string"
        example: "Great description"
      image:
        type: "string"
        example: "https://image.com"

  ItemPutRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Item name"
      category:
        type: "string"
        example: "Category1"
      note:
        type: "string"
        example: "Great description"
      image:
        type: "string"
        example: "https://image.com"

  ItemResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      category_id:
        type: "integer"
      user_id:
        type: "integer"
      note:
        type: "string"
      image:
        type: "string"
      created_at:
        type: "string"
      updated_at:
        type: "string"

  Error:
    type: "object"
    properties:
      status:
        type: "string"
        example: "error"
      message:
        type: "string"

  ValidationError:
    type: "object"
    properties:
      status:
        type: "string"
        example: "error"
      field:
        type: "string"
      message:
        type: "string"
